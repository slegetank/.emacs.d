emacs 是个操作系统，怎么能没有自己的shell呢。

* package
** eshell-prompt-extras
更好的UI
#+BEGIN_SRC emacs-lisp
(require-package 'eshell-prompt-extras)

(with-eval-after-load "esh-opt"
  (autoload 'epe-theme-lambda "eshell-prompt-extras")
  (setq eshell-highlight-prompt t
        eshell-prompt-function 'epe-theme-lambda))
#+END_SRC
** eshell-git-prompt
更好的UI for git
如果UI出现错误，需要先下载字体：https://github.com/powerline/fonts
#+BEGIN_SRC emacs-lisp
  (require-package 'eshell-git-prompt)
  (eshell-git-prompt-use-theme 'powerline)
#+END_SRC
** eshell-z
z for eshell
#+BEGIN_SRC emacs-lisp
  (require-package 'eshell-z)
  (require 'eshell-z)
#+END_SRC
** eshell-did-you-mean
错误提示
#+BEGIN_SRC emacs-lisp
  (require-package 'eshell-did-you-mean)
  (eshell-did-you-mean-setup)
#+END_SRC
** eshell-fringe-status
显示结果提示
#+BEGIN_SRC emacs-lisp
  (require-package 'eshell-fringe-status)
  (add-hook 'eshell-mode-hook 'eshell-fringe-status-mode)
#+END_SRC
** esh-autosuggest
自动提示
#+BEGIN_SRC emacs-lisp
  (require-package 'esh-autosuggest)
  (require 'esh-autosuggest)
  (add-hook 'eshell-mode-hook #'esh-autosuggest-mode)

  (setq ivy-do-completion-in-region t) ; this is the default
  (define-key esh-autosuggest-active-map (kbd "C-e") 'company-complete-selection)

  (defun setup-eshell-ivy-completion ()
    (define-key eshell-mode-map [remap eshell-pcomplete] 'completion-at-point)
    ;; only if you want to use the minibuffer for completions instead of the
    ;; in-buffer interface
    (setq-local ivy-display-functions-alist
                (remq (assoc 'ivy-completion-in-region ivy-display-functions-alist)
                      ivy-display-functions-alist)))

  (add-hook 'eshell-mode-hook #'setup-eshell-ivy-completion)

#+END_SRC
** shell-switcher
#+BEGIN_SRC emacs-lisp
  (require-package 'shell-switcher)
  (require 'shell-switcher)
  (add-hook 'eshell-mode-hook 'shell-switcher-manually-register-shell)
  (add-hook 'eshell-mode-hook (lambda ()
                                (setq-local shell-switcher-mode t)))
#+END_SRC
** with-editor
#+BEGIN_SRC emacs-lisp
  (require-package 'with-editor)
  (add-hook 'eshell-mode-hook 'with-editor-export-editor)
#+END_SRC
* custom
** smart
#+BEGIN_SRC emacs-lisp
  (defun slegetank/setup-eshell-smart ()
    (require 'em-smart)
    (eshell-smart-initialize)
    (add-to-list 'eshell-smart-display-navigate-list 'simpleclip-paste)
    (add-to-list 'eshell-smart-display-navigate-list 'evil-paste-after))
#+END_SRC
** readonly
https://emacs.stackexchange.com/questions/19163/how-do-i-protect-command-output-in-eshell-and-repl-buffers
#+BEGIN_SRC emacs-lisp
  ;; (defun eshell-interactive-output-readonly ()
  ;;   "Make output of interactive commands in eshell read-only.
  ;; This should be the last entry in eshell-output-filter-functions!"
  ;;   (let ((end eshell-last-output-end))
  ;;     (save-excursion
  ;;       (goto-char end)
  ;;       (end-of-line 0)
  ;;       (setq end (point)))
  ;;     (when (< eshell-last-output-block-begin end)
  ;;       (put-text-property eshell-last-output-block-begin end 'read-only "Read-only interactive eshell output"))))

  ;; (defun eshell-make-interactive-output-readonly ()
  ;;   (add-hook 'eshell-output-filter-functions 'eshell-interactive-output-readonly 'append))

  ;; (add-hook 'eshell-mode-hook 'eshell-make-interactive-output-readonly)
#+END_SRC
** 快速打开：
#+BEGIN_SRC emacs-lisp
  (defun slegetank/eshell-switch-buffer (buffer-or-name)
    "Switch eshell and update list index."
    (let ((buffer (get-buffer buffer-or-name)))
      (rswitcher--delete sswitcher--ring
                         (cl-position buffer (rswitcher--elements sswitcher--ring)))
      (rswitcher-add sswitcher--ring buffer)
      (switch-to-buffer buffer)))

  (defun slegetank/eshell-fast-open (buffer)
    "Open or switch."
    (interactive)
    (let* ((parent (if (buffer-file-name)
                       (file-name-directory (buffer-file-name))
                     default-directory))
           (name (car (last (split-string parent "/" t)))))
      (split-window-sensibly)
      (other-window 1)
      (if (rswitcher-empty-p sswitcher--ring)
          (progn
            (eshell "new")
            (rename-buffer (concat "*eshell: " name " <1>*"))
            (insert (concat "ls"))
            (eshell-send-input))
        (slegetank/eshell-switch-buffer (or buffer (sswitcher--most-recent))))
      (goto-char (point-max))
      (evil-insert-state)))

  (defun slegetank/eshell-exist-for-index (index)
    "Check if the eshell buffer for index is exist"
    (let ((exist nil)
          (eshelllist (rswitcher--elements sswitcher--ring)))
      (while (and eshelllist (not exist))
        (if (string-match (format "\*eshell:.*?<%d>\*" index) (buffer-name (car eshelllist)))
            (setq exist t)
          (setq eshelllist (cdr eshelllist))))
      exist))

  (defun slegetank/eshell-new-inside ()
    "New eshell in shell."
    (interactive)
    (let* ((parent (if (buffer-file-name)
                       (file-name-directory (buffer-file-name))
                     default-directory))
           (name (car (last (split-string parent "/" t))))
           (index 1))
      (eshell "new")
      (while (slegetank/eshell-exist-for-index index)
        (setq index (1+ index)))
      (rename-buffer (concat "*eshell: " name " <" (number-to-string index) ">*"))
      (insert (concat "ls"))
      (eshell-send-input)
      (goto-char (point-max))
      (evil-insert-state)))

  (defun slegetank/eshell-switch ()
    "Switch multi shell wrapper."
    (interactive)
    (if (>= 1 (rswitcher-length sswitcher--ring))
        (slegetank/eshell-new-inside)
      (shell-switcher-switch-buffer)))

  (define-key shell-switcher-mode-map (kbd "C-'")
    'slegetank/eshell-switch)
#+END_SRC

** exit关闭窗口；q for evil
#+BEGIN_SRC emacs-lisp
  (defun slegetank/exit-eshell-window (&optional window)
    "Really kill eshell window."
    (interactive)
    (save-current-buffer
      (setq window (or window (selected-window)))
      (select-window window)
      (rswitcher-delete-most-recent sswitcher--ring)
      (if (one-window-p t)
          (previous-buffer)
        (if (= (rswitcher-length sswitcher--ring) 0)
            (delete-window (selected-window))
          (slegetank/eshell-switch-buffer (sswitcher--most-recent))))))

  (add-hook 'eshell-exit-hook 'slegetank/exit-eshell-window)

  (defun slegetank/quit-eshell-window (&optional window)
    "Quit but not kill eshell window. For 'q'."
    (interactive)
    (save-current-buffer
      (setq window (or window (selected-window)))
      (select-window window)
      (if (one-window-p t)
          (previous-buffer)
        (delete-window (selected-window)))))
#+END_SRC

** 支持拖动路径：
#+BEGIN_SRC emacs-lisp
  (defun slegetank/shell-drag-deal-function (event)
    "Shell supports drag file path"
    (interactive "e")
    "deal with mouse drag file into org"
    (x-focus-frame nil)
    (let* ((payload (car (last event)))
           (type (car payload))
           (fromname (cadr payload)))
      (when (and (eq 'drag-n-drop (car event))
                 (eq 'file type))
        (insert (format "\"%s\"" fromname)))))

  (add-hook 'eshell-mode-hook '(lambda ()
                                 (define-key eshell-mode-map (kbd "<drag-n-drop>") 'slegetank/shell-drag-deal-function)))
#+END_SRC

** 清屏自定义
#+BEGIN_SRC emacs-lisp
  (defun slegetank/eshell/clear-screen ()
    "Custom clear method"
    (interactive)
    (let ((input (eshell-get-old-input)))
      (eshell/clear-scrollback)
      (eshell-emit-prompt)
      (insert input)))
#+END_SRC

** buffer名同路径
#+BEGIN_SRC emacs-lisp
  (add-hook 'eshell-directory-change-hook (lambda () (let* ((parent (if (buffer-file-name)
                                                                        (file-name-directory (buffer-file-name))
                                                                      default-directory))
                                                            (name (car (last (split-string parent "/" t))))
                                                            (index (substring (car (s-match " <.*?>\\*" (buffer-name))) 2 -2)))
                                                       (rename-buffer (concat "*eshell: " name (format " <%s>*" index))))))
#+END_SRC

** history
ivy搜索历史
#+BEGIN_SRC emacs-lisp
  (defun slegetank/eshell-history ()
    "Interactive search eshell history."
    (interactive)
    (require 'em-hist)
    (save-excursion
      (let* ((start-pos (eshell-bol))
             (end-pos (point-at-eol))
             (input (buffer-substring-no-properties start-pos end-pos)))
        (let* ((command (ivy-read "Command: "
                                  (delete-dups
                                   (when (> (ring-size eshell-history-ring) 0)
                                     (ring-elements eshell-history-ring)))
                                  :preselect input
                                  :action #'ivy-completion-in-region-action))
               (cursor-move (length command)))
          (kill-region (+ start-pos cursor-move) (+ end-pos cursor-move))
          )))
    ;; move cursor to eol
    (end-of-line)
    )
#+END_SRC
** s-number 切换shell
#+BEGIN_SRC emacs-lisp
  (defun slegetank/eshell-switch-by-num (num)
    (let ((list (rswitcher--elements sswitcher--ring))
          foundp)
      (while (and (not foundp) list)
        (setq buffer (car list))
        (when (s-match (format " <%d>*" num) (buffer-name buffer))
          (setq foundp t)
          (slegetank/eshell-switch-buffer buffer))
        (setq list (cdr list)))
      (unless foundp
        (message "Found no shell %d" num))))
#+END_SRC
** ivy switch
#+BEGIN_SRC emacs-lisp
  (defun slegetank/eshell-ivy-switch ()
    "Switch use ivy."
    (interactive)
    (if (rswitcher-empty-p sswitcher--ring)
        (message "Found no shell buffer.")
      (let ((list (rswitcher--elements sswitcher--ring))
            namelist
            buffer)
        (while list
          (add-to-list 'namelist (buffer-name (car list)))
          (setq list (cdr list)))
        (setq buffer (ivy-completing-read "Switch to: " namelist nil t))
        (if (bound-and-true-p eshell-mode)
            (slegetank/eshell-switch-buffer buffer)
          (slegetank/eshell-fast-open buffer)))))
#+END_SRC
** advice switch buffer
直接切换buffer到eshell下会打乱顺序，修饰之：
#+BEGIN_SRC emacs-lisp
  ;; (defun slegetank/eshell-advice-switch-buffer (oldfunc &rest args)
  ;;   (let ((destbuf (apply oldfunc args)))
  ;;     (with-current-buffer (get-buffer destbuf)
  ;;       (when (bound-and-true-p eshell-mode)
  ;;         (rswitcher--delete sswitcher--ring
  ;;                            (cl-position (current-buffer) (rswitcher--elements sswitcher--ring)))
  ;;         (rswitcher-add sswitcher--ring (current-buffer))))))

  ;; (advice-add 'ivy-switch-buffer :around 'slegetank/eshell-advice-switch-buffer)
#+END_SRC
** async shell buffer q->quit
#+BEGIN_SRC emacs-lisp
  (defun slegetank/async-shell-set-quit-key ()
    (when (string= (buffer-name) "*Async Shell Command*")
      (local-set-key (kbd "q") #'quit-window)))

  (add-hook 'shell-mode-hook #'slegetank/async-shell-set-quit-key)
#+END_SRC
** 环境变量
#+BEGIN_SRC emacs-lisp
  (when (and (getenv "SHELL") (file-exists-p "~/.zshrc"))
    (with-temp-buffer
      (insert-file-contents "~/.zshrc")

      (dolist (line (s-match-strings-all "^EXPORT.*?\n" (buffer-string)) nil)
        (let* ((arr (s-split "=" (s-chop-prefix "export " (s-chomp (car line)))))
               (env (s-chop-prefix "\"" (s-chop-suffix "\"" (car arr))))
               (value (s-chop-prefix "\"" (s-chop-suffix "\"" (cadr arr)))))
          (unless (equal env "PATH")
            (setenv env value))))))
#+END_SRC
** python-autocomplete
#+BEGIN_SRC emacs-lisp
  ;; (defun slegetank/python-autocomplete-setup ()
  ;;       (interactive)
  ;;       (set (make-local-variable 'pcomplete-parse-arguments-function)
  ;;            'pcomplete-parse-foo-arguments)
  ;;       (set (make-local-variable 'pcomplete-default-completion-function)
  ;;            'slegetank/pcomplete-python-default-completion))

  ;; (defun slegetank/pcomplete-python-default-completion ()
  ;;      (pcomplete-here foo-all-completions))

  ;; (add-hook 'eshell-mode-hook 'slegetank/python-autocomplete-setup)


  ;; (let ((running-process (get-buffer-process (current-buffer))))
  ;;   (when (and running-process (s-contains? "python" (process-name running-process)))
  ;;     (message "123")))
#+END_SRC
** ...
#+BEGIN_SRC emacs-lisp
  ;; (defun advice-... (orig-fun &rest args)
  ;;   (let ((res (apply orig-fun args)))
  ;;     (when (and (= 1 (length res)) (string-match-p "^[.]*$" (car res)))
  ;;       (setq res (cons "cd" res)))
  ;;     (message "2 %S" res)
  ;;     res))

  ;; (advice-add 'eshell-parse-arguments :around #'advice-...)

  ;; (defun advice-cd ()
  ;;   (with-current-buffer (current-buffer)
  ;;     (message "aaa %s" (buffer-substring-no-properties eshell-last-output-end (1- (point))))
  ;;     )
  ;;   )

  ;; (add-hook 'eshell-pre-command-hook 'advice-cd)

#+END_SRC

* alias
Go to xcode dir:
#+BEGIN_SRC emacs-lisp
  (defun slegetank/eshell/goto-xcode-directory ()
    "eshell go to current xcode dir"
    (eshell/cd (file-name-as-directory
                (file-name-directory
                 (s-trim (shell-command-to-string "osascript -e 'tell application id \"com.apple.dt.Xcode\" to return path of document 1'"))))))
#+END_SRC

Go to Finder dir:
#+BEGIN_SRC emacs-lisp
  (defun slegetank/eshell/goto-finder-directory ()
    "eshell go to current finder dir"
    (eshell/cd (file-name-as-directory
                (s-trim
                 (shell-command-to-string "osascript -e \'tell app \"Finder\" to POSIX path of (insertion location as alias)\'")))))
#+END_SRC

Go to last buffer's dir:
#+BEGIN_SRC emacs-lisp
  (defun slegetank/eshell/goto-last-buffer-directory ()
    "eshell go to last buffer's dir"
    (let (previousdir)
      (with-current-buffer (other-buffer (current-buffer) 1)
        (setq previousdir (file-name-directory (or default-directory ""))))
      (eshell/cd previousdir)))
#+END_SRC
* setup
#+BEGIN_SRC emacs-lisp
  (setq eshell-cmpl-ignore-case t)
  (setq eshell-glob-case-insensitive t)

  (defun slegetank/eshell-setup ()
    ;; (slegetank/setup-eshell-smart)
    (define-key eshell-mode-map (kbd "s-k") 'slegetank/eshell/clear-screen)
    (define-key eshell-mode-map (kbd "s-t") 'slegetank/eshell-new-inside)
    (define-key eshell-mode-map (kbd "s-w") 'kill-this-buffer)
    (define-key eshell-mode-map (kbd "s-1") (lambda () (interactive) (slegetank/eshell-switch-by-num 1)))
    (define-key eshell-mode-map (kbd "s-2") (lambda () (interactive) (slegetank/eshell-switch-by-num 2)))
    (define-key eshell-mode-map (kbd "s-3") (lambda () (interactive) (slegetank/eshell-switch-by-num 3)))
    (define-key eshell-mode-map (kbd "s-4") (lambda () (interactive) (slegetank/eshell-switch-by-num 4)))
    (define-key eshell-mode-map (kbd "s-5") (lambda () (interactive) (slegetank/eshell-switch-by-num 5)))

    (evil-define-key '(insert normal) eshell-mode-map (kbd "C-r") 'slegetank/eshell-history)
    (evil-define-key '(insert normal) eshell-mode-map (kbd "C-n") 'eshell-next-matching-input-from-input)
    (evil-define-key '(insert normal) eshell-mode-map (kbd "C-p") 'eshell-previous-matching-input-from-input)
    (evil-define-key '(insert normal) eshell-mode-map (kbd "C-j") 'eshell-next-matching-input-from-input)
    (evil-define-key '(insert normal) eshell-mode-map (kbd "C-k") 'eshell-previous-matching-input-from-input)
    (evil-define-key 'normal eshell-mode-map (kbd "A") (lambda ()
                                                         "A goto last command's end."
                                                         (interactive)
                                                         (goto-char (point-max))
                                                         (evil-insert-state)))

    (evil-define-key 'normal eshell-mode-map (kbd "<return>") (lambda ()
                                                                "Enter goto last command's end and execute."
                                                                (interactive)
                                                                (goto-char (point-max))
                                                                (evil-insert-state)
                                                                (eshell-send-input)))

    (evil-define-key 'normal eshell-mode-map (kbd "q") 'slegetank/quit-eshell-window)

    ;; 默认设置
    (setq eshell-scroll-to-bottom-on-input t
          eshell-error-if-no-glob t
          eshell-hist-ignoredups t
          eshell-save-history-on-exit t
          eshell-prefer-lisp-functions nil
          eshell-destroy-buffer-when-process-dies t))

  (global-set-key (kbd "s-t") (lambda ()
                                (interactive)
                                (slegetank/eshell-fast-open nil)))

  (add-hook 'eshell-mode-hook 'slegetank/eshell-setup)

  ;; (slegetank/leader-define-key "tt" (lambda () (interactive)
  ;;                                         (if (bound-and-true-p eshell-mode)
  ;;                                             (slegetank/quit-eshell-window)
  ;;                                           (slegetank/eshell-fast-open nil))) "terminal"
  ;;                                           "ts" 'slegetank/eshell-ivy-switch
  ;;                                           )
#+END_SRC
* 文章
1. 自定义方法
   https://www.emacswiki.org/emacs/EshellFunctions
2. alias
   https://www.emacswiki.org/emacs/EshellAlias
3. 提示
   https://www.masteringemacs.org/article/pcomplete-context-sensitive-completion-emacs
